##################      ##################
# Here you can configure the rules for the proxy.
#
# We provide two kinds of configurations for example. The one is the configuration of Sharding rule,
# and the other is the configuration of master-slave rule.
# If you want to use Sharding, please refer to the first one, and if you only want to use master-slave,
# please refer to the second one.
#
##################      ##################


# The example of Sharding rule.

#dataSources:
#  ds_0:
#    url: jdbc:mysql://127.0.0.1:3306/ds_0
#    username: root
#    password:
#  ds_1:
#    url: jdbc:mysql://127.0.0.1:3306/ds_1
#    username: root
#    password:
#
#shardingRule:
#  tables:
#    t_order:
#      actualDataNodes: ds_${0..1}.t_order_${0..1}
#      tableStrategy:
#        inline:
#          shardingColumn: order_id
#          algorithmExpression: t_order_${order_id % 2}
#      keyGeneratorColumnName: order_id
#    t_order_item:
#      actualDataNodes: ds_${0..1}.t_order_item_${0..1}
#      tableStrategy:
#        inline:
#          shardingColumn: order_id
#          algorithmExpression: t_order_item_${order_id % 2}
#  bindingTables:
#    - t_order,t_order_item
#  defaultDatabaseStrategy:
#    inline:
#      shardingColumn: user_id
#      algorithmExpression: ds_${user_id % 2}
#  defaultTableStrategy:
#    none:
#  defaultKeyGeneratorClassName: io.shardingsphere.core.keygen.DefaultKeyGenerator
#
#  props:
#    sql.show: true



# The example of master-slave rule.

#dataSources:
#  ds_0:
#    url: jdbc:mysql://127.0.0.1:3306/ds_0
#    username: root
#    password:
#  ds_1:
#    url: jdbc:mysql://127.0.0.1:3306/ds_1
#    username: root
#    password:
#masterSlaveRule:
#  name: ds_ms
#  masterDataSourceName: ds_0
#  slaveDataSourceNames:
#    - ds_1


dataSources:
  ds_0:
    url: jdbc:mysql://10.255.212.11:3306/db_3
    username: root
    password: 1234
  ds_1:
    url: jdbc:mysql://10.255.212.11:3306/db_4
    username: root
    password: 1234

shardingRule:
  tables:
    user:
      actualDataNodes: ds_${0..1}.user
      keyGeneratorColumnName: id

    post:
      actualDataNodes: ds_${0..1}.post
      databaseStrategy:
          inline:
            shardingColumn: pid
            algorithmExpression: ds_${pid % 2}
      keyGeneratorColumnName: pid

  bindingTables:
    - user

  defaultDatabaseStrategy:
    inline:
      shardingColumn: id
      algorithmExpression: ds_${id % 2}

  defaultTableStrategy:
    none:

  noSharding:
    defaultKeyGeneratorColumnName: id
    keyGeneratorColumnNames:
      msg: msgid
      category: id
    excludeTables:
      - topic

  defaultKeyGeneratorClassName: io.shardingsphere.core.keygen.DefaultKeyGenerator
  defaultDataSourceName: ds_0
  props:
    sql.show: true

